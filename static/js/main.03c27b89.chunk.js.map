{"version":3,"sources":["components/CodeEditor.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lint","theme","mode","lineNumbers","App","useState","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","file","setFile","useEffect","timeout","setTimeout","clearTimeout","handleclick","filetype","type","onClick","style","textAlign","backgroundColor","color","height","paddingLeft","paddingTop","title","sandbox","frameBorder","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAWe,SAASA,EAAOC,GAE7B,IACEC,EAIED,EAJFC,SACAC,EAGEF,EAHFE,YACAC,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SAQF,OACE,sBAAKC,UAAS,2BAAd,UAEE,qBAAKA,UAAU,eAAf,SACGH,IAIH,cAAC,aAAD,CACEI,eAbN,SAAsBC,EAAQC,EAAML,GAClCC,EAASD,IAaLA,MAAOA,EACPE,UAAU,sBACVI,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,MAAO,WACPC,KAAMZ,EAENa,aAAa,QC+DRC,MAtGf,WAEE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAoBF,mBAAS,IAA7B,mBAAOG,EAAP,KAAWC,EAAX,KACA,EAAkBJ,mBAAS,IAA3B,mBAAOK,EAAP,KAAUC,EAAV,KACA,EAAyBN,mBAAS,IAAlC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAqBR,mBAAS,IAA9B,mBAAOS,EAAP,KAAYC,EAAZ,KAGAC,qBAAU,WACT,IAAMC,EAAQC,YAAW,WACxBL,EAAU,iCAAD,OAGGP,EAHH,mCAIIE,EAJJ,qCAKKE,EALL,sCAQR,KACF,OAAO,kBAAKS,aAAaF,MACvB,CAACX,EAAKE,EAAIE,IAIb,IAAMU,EAAY,SAACC,GACjBN,EAAQM,IAEV,OACE,qCACA,sBAAK3B,UAAU,gBAAf,UAEE,wBAAQ4B,KAAK,SAAS5B,UAAU,eAAe6B,QAAS,kBAAIH,EAAY,KAAxE,0BACA,wBAAQE,KAAK,SAAU5B,UAAU,eAAe6B,QAAS,kBAAIH,EAAY,SAAzE,wBACA,wBAAQE,KAAK,SAAU5B,UAAU,eAAe6B,QAAS,kBAAIH,EAAY,QAAzE,uBACA,wBAAQE,KAAK,SAAU5B,UAAU,eAAe6B,QAAS,kBAAIH,EAAY,eAAzE,yBAGF,sBAAK1B,UAAU,gBAAf,UAGS,IAANoB,GAAY,mCACb,sBAAKpB,UAAU,qBAAf,UACA,oBAAI8B,MAAO,CAACC,UAAU,UAAtB,sDAEA,gCACE,mGACG,wHACC,wKAQC,QAANX,GACD,cAAC,EAAD,CACExB,SAAS,MACTC,YAAY,OACZC,MAAOc,EACPb,SAAUc,IAGL,OAANO,GACD,cAAC,EAAD,CACExB,SAAS,MACTC,YAAY,MACZC,MAAOgB,EACPf,SAAUgB,IAEJ,cAANK,GACF,cAAC,EAAD,CACExB,SAAS,aACTC,YAAY,aACZC,MAAOkB,EACPjB,SAAUkB,OAKbG,GAAQ,yCAAG,qBAAKU,MAAO,CAACE,gBAAgB,UAAUC,MAAM,QAAQC,OAAO,MAAOC,YAAY,OAAOC,WAAW,OAAjG,oBAEZ,qBAAKpC,UAAU,mBAAf,SAEE,wBAEEkB,OAAQA,EACRmB,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNN,OAAO,kBC1FfO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.03c27b89.chunk.js","sourcesContent":["//making all necessary imports like React, useState, codemirror and controlled\r\nimport React, {useState} from 'react'\r\n//importing codemirror's necessary imports so as to to work with html,css and js\r\n// and do the lazy loading for the syntax higlights, themes firing codemirror events\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/css/css'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport { Controlled as ControlEditorSection } from 'react-codemirror2'\r\n\r\nexport default function Editor(props) {\r\n  // declaring the set of props\r\n  const {\r\n    language,\r\n    displayName,\r\n    value,\r\n    onChange\r\n  } = props\r\n   \r\n  // function handling the change with codes of particular files\r\n  function handleChange(editor, data, value) {\r\n    onChange(value)\r\n  }\r\n\r\n  return (\r\n    <div className={`editorsection-container `}>\r\n    \r\n      <div className=\"titlesection\">\r\n        {displayName}\r\n        \r\n      </div>\r\n      {/* editor sections for appearance as soon as particular file is clicked:index.html, index.css, index.js */}\r\n      <ControlEditorSection\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          theme: 'material',\r\n          mode: language,\r\n        \r\n          lineNumbers: true\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","// Necessary imports as React, Use State, useEffect has been made here\r\nimport React, {useState, useEffect} from \"react\";\r\nimport CodeEditor from \"./CodeEditor\";\r\n\r\nfunction App() {\r\n  // declaring the states so as to take html,css,js code and output accordingly\r\n  const [html,setHtml] =useState('')\r\n  const [css,setCss] =useState('')\r\n  const [js,setJs] =useState('')\r\n  const [srcDoc,setSrcDoc]=useState('')\r\n  const [file,setFile]=useState('')\r\n  //using effect so that the changes on output screen take some miliseconds to appear \r\n  //and make appearance of rendered HTML not like hassle\r\n  useEffect(() => {\r\n   const timeout=setTimeout(()=>{\r\n    setSrcDoc(\r\n      `\r\n      <html>\r\n        <body>${html}</body>\r\n        <style>${css}</style>\r\n        <script>${js}</script>\r\n      </html>\r\n    `)\r\n   },300)\r\n   return ()=> clearTimeout(timeout)\r\n  }, [html,css,js])\r\n \r\n  \r\n  //function for handling html, css and js file and preview their editor on screen as per clicked\r\n  const handleclick=(filetype)=> {\r\n    setFile(filetype)\r\n  }\r\n  return (\r\n    <>\r\n    <div className=\"headersection\">\r\n      {/* //adding buttons for handling instructions, index.html, index.css, index.js */}\r\n      <button type=\"button\" className=\"button-class\" onClick={()=>handleclick(\"\")}>Instructions</button>\r\n      <button type=\"button\"  className=\"button-class\" onClick={()=>handleclick(\"html\")}>Index.Html</button>\r\n      <button type=\"button\"  className=\"button-class\" onClick={()=>handleclick(\"css\")}>Index.Css</button>\r\n      <button type=\"button\"  className=\"button-class\" onClick={()=>handleclick(\"javascript\")}>Index.Js</button>\r\n\r\n    </div>\r\n    <div className=\"pane top-pane\">\r\n      {/* //checking condition so as to let instructions section appear when clicked \r\n      //and when refreshed and not between other file sections */}\r\n      {file==\"\" && <>\r\n      <div className=\"instructions-style\">\r\n      <h1 style={{textAlign:\"center\"}}>Welcome to the Dyte Online Code Editor! </h1>\r\n       \r\n      <div>\r\n        <h3>You can play with the html,css and js code online simultaneously.</h3>\r\n           <h3> All the changes will be reflected at the bottom without need of refreshing  the page.</h3>\r\n            <h3>Navigate through index.html button for html editor, index.css button for css editor and index.js button for javascript editor.</h3>\r\n      </div>\r\n      </div>\r\n      </>\r\n       \r\n      // passing the html,css and js value as passed on by the user\r\n      // and applying with onChange event\r\n      }\r\n      {file==\"html\" && \r\n      <CodeEditor \r\n        language=\"xml\"\r\n        displayName=\"HTML\"\r\n        value={html}\r\n        onChange={setHtml}\r\n      />}\r\n      \r\n      {file==\"css\" && \r\n      <CodeEditor \r\n        language=\"css\"\r\n        displayName=\"CSS\"\r\n        value={css}\r\n        onChange={setCss}\r\n      />}\r\n       {file==\"javascript\" && \r\n      <CodeEditor \r\n        language=\"javascript\"\r\n        displayName=\"JavaScript\"\r\n        value={js}\r\n        onChange={setJs}\r\n      />}\r\n      \r\n     {/* //div for passing OUTPUT section whenever one of 3 files appear */}\r\n    </div>\r\n    {file && <> <div style={{backgroundColor:\"#263238\",color:\"white\",height:\"3vh\", paddingLeft:\"20px\",paddingTop:\"5px\"}}>OUTPUT</div>\r\n   \r\n    <div className=\"pane bottom-pane\">\r\n    \r\n      <iframe\r\n           \r\n        srcDoc={srcDoc}\r\n        title=\"output\"\r\n        sandbox=\"allow-scripts\"\r\n        frameBorder=\"0\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n      \r\n      />\r\n    </div>\r\n    </> }\r\n    </>\r\n   \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}